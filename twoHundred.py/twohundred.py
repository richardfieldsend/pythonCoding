################################################################
# Maths Problems Homework.
#
# Lizzie had some homework on the weekend of the 12th/13th March 2016
# a problem was set. The homework was to look at how to think like a
# maths person, and not necessarily to get all the right answers. Lizzie
# tried to do the problem in a slightly chaotic way, and didn't get a
# working answer. I eventually found an answer (my methodology is given
# below.
#
# I also set about trying to do it programmatically. The following is
# the result of that process (it took a lot of wrong turns before I
# got it working. I don't think I had tried for loops in Python
# before.
#
# Problem description:
#
# Four cells arranged in two columns and two rows. Enter numbers in
# the cells from the range 1-9, but each number needs to be
# different. Having filled the cells you can read off four two digit
# numbers using the two rows (left to right) and the two columns (top
# to bottom). Write out the four numbers and add them together. Are
# there any four numbers which, when treated in this way total to 200.
#
# Example:
#
# square:  |2|3|
#          |4|5| gives: 23 + 45 + 24 + 35 = 17+110 = 127
#
# Manual Method:
#
# Labelling the four cells (top left to bottom right) a,b,c,d the
# formula for the sum is:
#  20a + 11b + 11c + 2d = total.
# As the first and last terms will always be even numbers and the
# target value is an even number the other two terms (11b and 11c)
# must total to an even number. As this in the case the values must
# either both be even or both be odd. I used this to narrow the field
# of investigation. Calculating the sums of the available odd numbers
# and multiplying by 11. That is: 1+3, 1+5, 1+7, 1+9, 3+5, 3+7, 3+9
# etc. For each of these values you can multiply the result by 11 to
# give the two middle terms of the equation. This excludes a number of
# larger values where the sum multiplied by 11 will exceed the target
# of 200, or not leave enough left over for the 20a and 2d
# values. Using this reduced target range I found solutions with odd
# numbers in the b and c cells. I then chose to use a similar method
# to find even number values. It is trivial to show that if:
#
# |a|b|
# |c|d| is a valid solution then so is:
#
# |a|c|
# |b|d|
#
# TLDR: I found four solutions (two solutions with symmetry) by hand.
#
# Computed method:
#
# I used what is essentially a brute force method for the programmatic
# solution to the problem. The variables cell1..cell4 are used to
# store the values 1-9 as generated by a for loop in each case. The
# loops are nested so that the values increment from the inner loop
# outwards. I then generated four values toprow, bottomrow,
# leftcolumn, rightcolumn by multiplying the 'tens' column cell by ten
# and adding the units cell. The total was then calculated by adding
# the four numbers together.
#
# The program then uses a simple check of the generated result and the
# numbers used to generate the result. If the result is 200 and none
# of the cells contain the same values then the values, the generated
# numbers and the total are displayed using a print statement.
#
# The program is *not* good. It is incredibly wasteful as it
# calculates the result of every square even when two or more cells
# are the same. While this isn't a problem here (the program executes
# instantly even on an old laptop using a not particularly honed
# language), it would be more of an issue with more difficult
# problems.
#
# Anyway, using the program the total number of solutions to the
# problem appears to be: 22.

for cell1 in xrange(1,10):
	for cell2 in xrange(1,10):
		for cell3 in xrange(1,10):
			for cell4 in xrange(1,10):
				toprow = (cell1 * 10) + cell2;
				bottomrow = (cell3 * 10) + cell4;
				leftcolumn = (cell1 * 10) + cell3;
				rightcolumn = (cell2 * 10) + cell4;
				total = toprow + bottomrow + leftcolumn + rightcolumn;
				if total == 200 and cell1 != cell2 and cell1 != cell3 and cell1 != cell4 and cell2 != cell3 and cell2 != cell4 and cell3 != cell4:
					print "no.s %d, %d, %d, %d give:  %d + %d + %d + %d total=%d" % (cell1,cell2,cell3,cell4,toprow,bottomrow,leftcolumn,rightcolumn,total);
